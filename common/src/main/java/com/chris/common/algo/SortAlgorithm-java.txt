package com.bplan.core.algorith.demo;

/**
 * 关于排序方法的选择： 
 * (1)若n较小(如n≤50)，可采用直接插入或直接选择排序。
 *  	当记录规模较小时，直接插入排序较好；否则因为直接选择移动的记录数少于直接插人，应选直接选择排序为宜。
 * (2)若文件初始状态基本有序(指正序)，则应选用直接插人、冒泡或随机的快速排序为宜；
 * (3)若n较大，则应采用时间复杂度为O(nlgn)的排序方法：快速排序、堆排序或归并排序。
 * 
 */
public class Sort
{
	public static void main(String[] args)
	{
		int[] arr2 = { 4, 3, 7, 1, 6 };
		insertSort(arr2);

		int[] arr3 = { 4, 3, 7, 1, 6 };
		bubbleSort(arr3);
		
		int[] arr4 = { 4, 3, 7, 1, 6 };
		quickSortAsc(arr4,0,arr4.length-1);

		int[] arr5 = { 4, 3, 7, 1, 6 };
		selectSort(arr5);
	}

	/*
	 * 插入排序原理：
   * 在要排序的一组数中，假设前面(n-1) [n>=2] 个数已经是排好顺序的，现在要把第n个数插到前面的有序数中，使得这n个数也是排好顺序的;如此反复循环，直到全部排好顺序;
	 * 时间复杂度：平均O(n2)，最坏情况O(n2);直接插入排序是稳定的;
	 */
	public static void insertSort(int[] arr)
	{
		for (int i = 1; i < arr.length; i++) {
			for (int j = i - 1; j >= 0; j--) {
				if (arr[j] > arr[j + 1]) {
					swap(arr, j, j + 1); // 交换
				}
			}
		}
	}

	/*
	 * 冒泡排序原理：
	 * 在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒;
	 * 即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换;
	 * 时间复杂度：平均O(n2)，最坏情况O(n2);冒泡排序是稳定的;
	 */
	public static void bubbleSort(int[] arr)
	{
		for (int i = 1; i < arr.length; i++) {
			for (int j = 0; j < arr.length - i; j++) {
				if (arr[j] > arr[j + 1]) {
					swap(arr, j, j + 1);
				}
			}
		}
	}

	/*
	 * 简单选择排序原理：
	 * 在要排序的一组数中，选出最小的一个数与第一个位置的数交换；
	 * 然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止;
	 * 
	 * 时间复杂度：平均O(n2)，最坏情况O(n2);选择排序是不稳定的
	 */
	public static void selectSort(int[] arr)
	{
		for (int i = 0; i < arr.length - 1; i++) {
			int minIndex = i;
			int min = arr[i];

			for (int j = i + 1; j < arr.length; j++) {// 在后面, 找最小的.
				if (arr[j] < min) {
					minIndex = j;
					min = arr[j];
				}
			}

			if (minIndex != i) {
				swap(arr, i, minIndex);
			}
		}
	}

	/*
	 *快速排序 是对冒泡排序的一种本质改进
	 *它的基本思想是通过一趟扫描后，使得排序序列的长度能大幅度地减少;在冒泡排序中，一次扫描只能确保最大数值的数移到正确位置，而待排序序列的长度可能只减少1;
   *快速排序通过一趟扫描，就能确保某个数（以它为基准点吧）的左边各数都比它小，右边各数都比它大;然后又用同样的方法处理它左右两边的数，直到基准点的左右只有一个元素为;
	 *它是由C.A.R.Hoare于1962年提出的。显然快速排序可以用递归实现，当然也可以用栈化解递归实现;
	 *最理想情况算法时间复杂度 O(nlog2n)，最坏O(n2);快速排序是不稳定的;
 */
	public static void quickSortAsc(int[] arr,int low,int hight) {
		if (low < hight) { // 这个条件用来结束递归
			int pre = low;
			int bac = hight;
			int value = arr[low];//任意
			
			while(pre<bac) {
				while(pre<bac && arr[bac] > value) {
					bac--;// 从右向左找第一个小于x的数
				}
				
				if (pre<bac) {
					arr[pre] = arr[bac];
					pre++;
				}
				
				while (pre < bac && arr[pre] < value) {
					pre++; // 从左向右找第一个大于x的数
				}
				
				if (pre<bac) {
					arr[bac] =arr[pre];
					bac--;
				}
				
				arr[pre] = value;
				
				quickSortAsc(arr,low,pre-1);
				quickSortAsc(arr,pre+1,hight);
			}
		}
	}
	
	public static void swap(int[] arr, int src, int dest)
	{
		int tmp = arr[dest];
		arr[dest] = arr[src];
		arr[src] = tmp;
	}

	public static void printArr(int[] arr)
	{
		System.out.println("\n sort end:");
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
	}
}
